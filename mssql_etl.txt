
from airflow.operators.python import PythonOperator
from airflow import DAG
import config

from datetime import datetime
import pyodbc
import pandas as pd


cursor = None

def conn():
    con = pyodbc.connect('DRIVER={SQL Server};SERVER={0};DATABASE={1};'.format(config.SERVER, config.DATABASE))
    con.autocommit = True
    cursor = con.cursor()
    cursor.execute("USE my_db;")


def create_table():
    try:
        table_dept = """
            CREATE TABLE [dbo].[Department](
                [ID] [int] IDENTITY(1,1) NOT NULL,
                [name] [nvarchar](32) NOT NULL,
                [description] [nvarchar](255) NULL,
                [pid] [int] NULL,
                [Status] [int] NOT NULL,
                [Managetype] [int] NOT NULL,
                CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED
                (
                [ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY],
                CONSTRAINT [IX_Department] UNIQUE NONCLUSTERED
                (
                [pid] ASC,
                [name] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
                ) ON [PRIMARY];
            """
        
        cursor.execute(table_dept)
    except:
        pass


def insert_data():
    try:
        df = pd.read_csv('test.csv', sep='|')
        for index, row in df.iterrows():
            cursor.execute("INSERT INTO Department (name,description,pid,Status,Managetype) values(?,?,?,?,?)", 
                    row.name,row.description,row.pid,row.Status,row.Managetype
                    )
        cursor.close()
    except:
        pass


dag = DAG(
    'file_to_mssql',
    schedule_interval='@daily',
    start_date=datetime(2022, 12, 3),
    tags=['example'],
    catchup=False,
)


conn = PythonOperator(
        task_id='conn',
        python_callable=conn,
    )

create_table = PythonOperator(
        task_id='create_table',
        python_callable=create_table,
    )

insert_data = PythonOperator(
        task_id='insert_data',
        python_callable=insert_data,
    )

conn >> create_table >> insert_data
